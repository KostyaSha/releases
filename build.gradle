buildscript {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath 'com.github.yandex-qatools:juseppe:v1.0.0'
        classpath 'com.vdurmont:semver4j:2.0.1'
    }
}

plugins {
    id "base"
    id 'org.ajoberstar.github-pages' version '1.4.2'
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

configurations {
    plugin {
        transitive = false
    }
}

def githubToken = System.getenv('GH_TOKEN')

void logErrorOrFail(text) {
    def pullRequestEnv = System.getenv("TRAVIS_PULL_REQUEST")
    def isMasterBuild = !pullRequestEnv || "false".equalsIgnoreCase(pullRequestEnv)

    if (isMasterBuild) {
        services.get(org.gradle.logging.StyledTextOutputFactory).create("Jucies").withStyle(org.gradle.logging.StyledTextOutput.Style.Failure).println(text)
    } else {
        throw new GradleException(text)
    }
}

def gavToId = [:]

file("plugins").eachFile {
    if (!it.name.endsWith(".properties")) {
        throw new GradleException("'.properties' file extension was expected, but got: ${it}")
    }

    def properties = new Properties()
    it.withInputStream(properties.&load)

    def repository = properties.repository as String
    def parts = repository?.split("/", 2)

    if (parts?.length != 2) {
        throw new GradleException("Wrong format of 'repository' property! 'org/repo' was expected, but got '${repository}' in ${it}")
    }

    def groupId = "com.github.${parts[0]}"
    def artifactId = parts[1]

    def pluginId = it.name - '.properties'

    String version
    final String tag
    final String note
    if (properties.version) {
        version = properties.version
        tag = properties.tag ?: version
        note = ''
    } else {
        if (properties.tag) {
            throw new GradleException("'tag' property must not be used without 'version' property.")
        }

        try {
            def latestRelease = new groovy.json.JsonSlurper().parse("https://api.github.com/repos/${repository}/releases/latest${githubToken ? "?access_token=${githubToken}" : ""}".toURL())
            version = tag = latestRelease.tag_name

            def pluginPrefix = "${pluginId}-"
            if (version.startsWith(pluginPrefix)) {
                version = version.substring(pluginPrefix.length())
            }

            if (version.startsWith("v")) {
                version = version.substring(1)
            }

            note = latestRelease.body

            logger.info("Latest release of {}: {}", repository, version)
        } catch (Exception e) {
            logErrorOrFail("Failed to get the latest release of ${repository}")
            return;
        }
    }

    if (!version?.trim()) {
        throw new GradleException("'version' property can't be empty, but it is so in ${it}")
    }

    try {
        new com.vdurmont.semver4j.Semver(version, com.vdurmont.semver4j.Semver.SemverType.LOOSE);
    } catch (com.vdurmont.semver4j.SemverException e) {
        logErrorOrFail("${repository} has non-semantic version: ${e.message}")
        return;
    }

    def gav = "${groupId}:${artifactId}:${tag}"
    dependencies.add("plugin", gav)

    gavToId[gav] = [
            name: pluginId,
            version: version,
            note: note
    ]
}

import ru.lanwen.jenkins.juseppe.beans.UpdateSite
import ru.lanwen.jenkins.juseppe.gen.HPI
import ru.lanwen.jenkins.juseppe.util.PluginListSerializer
import com.google.gson.GsonBuilder

def updateCenterFile = project.file("${project.buildDir}/update-center.json")
task generate << {
    def site = new UpdateSite(
            id: "jucies",
            updateCenterVersion: 1,
            plugins: configurations.plugin.resolvedConfiguration.resolvedArtifacts.collect {
                def identifier = it.moduleVersion.id

                def gav = "${identifier.group}:${identifier.name}:${identifier.version}"

                def desc = gavToId[gav]

                return HPI.loadHPI(it.file)
                        .withName(desc.name)
                        .withVersion(desc.version)
                        .withExcerpt(desc.note)
                        .withUrl("https://jitpack.io/${identifier.group.replace(".", "/")}/${identifier.name}/${identifier.version}/${identifier.name}-${identifier.version}.hpi")
            }
    )

    def gson = new GsonBuilder()
            .registerTypeAdapter(PluginListSerializer.PLUGIN_LIST_TYPE, PluginListSerializer.asUpdateSite())
            .disableHtmlEscaping()
            .create()

    def result = String.format("updateCenter.post(%n%s%n);", gson.toJson(site))

    updateCenterFile.parentFile.mkdirs()
    updateCenterFile.delete()

    updateCenterFile << result
}

githubPages {
    repoUri = 'https://github.com/jucies/jucies.github.io.git'

    targetBranch = "master"

    if (githubToken) {
        println "GitHub token is set. Will use it as credentials"
        credentials {
            username = githubToken
            password = ''
        }
    }

    pages {
        from updateCenterFile
    }
}